{"version":3,"sources":["Screen/Screen.module.css","Button/Button.module.css","SetScreen/SetScreen.module.css","App.module.css","Board/Board.module.css","SetBoard/SetBoard.module.css","SetScreen/SetInput/SetInput.module.css","Screen/Screen.tsx","Button/Button.tsx","Board/Board.tsx","SetScreen/SetInput/SetInput.tsx","SetScreen/SetScreen.tsx","SetBoard/SetBoard.tsx","counterReducer.ts","App.tsx","serviceWorker.ts","store.ts","utils/localStorage-utils.ts","index.tsx"],"names":["module","exports","Screen","props","isDataEntering","useSelector","state","counter","className","s","screen","count","maxCount","error","redText","spanRed","isEditMode","setText","span","Button","onClick","changeCount","disabled","title","Board","board","minCount","buttonContainer","b","buttonInc","incCount","buttonRes","resetCount","SetInput","input","type","value","onChange","e","Number","currentTarget","SetScreen","setScreen","startText","changeMinCount","maxText","changeMaxCount","SetBoard","setBoard","setButtonContainer","buttonSet","setCounts","initialState","App","dispatch","useDispatch","app","container","newMinCount","ChangeMinCountAC","newMaxCount","ChangeMaxCountAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","stateCopy","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6f4c7d00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"Screen_screen__16ktV\",\"span\":\"Screen_span__obgsP\",\"spanRed\":\"Screen_spanRed__39XBl\",\"redText\":\"Screen_redText__2caTU\",\"setText\":\"Screen_setText__hf0Ou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonInc\":\"Button_buttonInc__3QvpQ\",\"buttonRes\":\"Button_buttonRes__1Vra3\",\"buttonSet\":\"Button_buttonSet__1p0ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setScreen\":\"SetScreen_setScreen__2sFZG\",\"startText\":\"SetScreen_startText__m-hSi\",\"maxText\":\"SetScreen_maxText__OFIYM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2gl7F\",\"container\":\"App_container__QBc_K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1qwKz\",\"buttonContainer\":\"Board_buttonContainer__1HZ7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setBoard\":\"SetBoard_setBoard__3RgRz\",\"setButtonContainer\":\"SetBoard_setButtonContainer__3nHLS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SetInput_input__3WfRo\",\"error\":\"SetInput_error__IC_hg\"};","import React from \"react\";\r\nimport s from './Screen.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../store\";\r\n\r\ntype ScreenType = {\r\n    count: number\r\n    minCount: number\r\n    maxCount: number\r\n    error: boolean\r\n    isEditMode: boolean\r\n}\r\n\r\nconst Screen = (props: ScreenType) => {\r\n\r\n    const isDataEntering = useSelector<AppStateType, boolean>(state => state.counter.isDataEntering)\r\n\r\n    return (\r\n        <div className={s.screen}>\r\n            {/*<span className={props.count < props.maxCount*/}\r\n            {/*    ? !props.isDataEntering*/}\r\n            {/*        ? s.span : s.setText*/}\r\n            {/*    : props.error*/}\r\n            {/*        ? s.redText*/}\r\n            {/*        : s.spanRed*/}\r\n            {/*}>*/}\r\n            {/*    {error*/}\r\n            {/*        ? \"Incorrect value!\"*/}\r\n            {/*        : isDataEntering*/}\r\n            {/*            ? \"enter values and press 'set'\"*/}\r\n            {/*            : props.count*/}\r\n            {/*    }*/}\r\n            {/*</span>*/}\r\n            <span className={props.count !== props.maxCount && !props.error\r\n                ? !props.isEditMode\r\n                    ? s.span\r\n                    : s.setText\r\n                : props.error\r\n                    ? s.redText\r\n                    : s.spanRed\r\n            }>\r\n            {props.error\r\n                ? s.redText\r\n                    ? \"Incorrect value!\"\r\n                    : \"error\"\r\n                : !isDataEntering\r\n                    ? props.count\r\n                    : \"enter values and press 'set'\"\r\n            }</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen","import React from \"react\";\r\n\r\ntype ButttonType = {\r\n    className: string\r\n    title: string\r\n    changeCount: () => void\r\n    disabled:boolean\r\n}\r\n\r\nconst Button = (props: ButttonType) => {\r\n    const button = () => {props.changeCount()}\r\n    return (\r\n        <button className={props.className}\r\n                onClick={button}\r\n                disabled={props.disabled}\r\n        >{props.title}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from \"react\"\r\nimport s from './Board.module.css'\r\nimport b from '../Button/Button.module.css'\r\nimport Screen from '../Screen/Screen'\r\nimport Button from \"../Button/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../store\";\r\n\r\ntype BoardType = {\r\n    minCount: number\r\n    maxCount: number\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    error: boolean\r\n    isEditMode: boolean\r\n}\r\n\r\nconst Board = (props: BoardType) => {\r\n\r\n    const count = useSelector<AppStateType, number>(state => state.counter.count)\r\n\r\n    return (\r\n        <div className={s.board}>\r\n            <Screen count={count}\r\n                    minCount={props.minCount}\r\n                    maxCount={props.maxCount}\r\n                    error={props.error}\r\n                    isEditMode={props.isEditMode}\r\n            />\r\n            <div className={s.buttonContainer}>\r\n                <Button className={b.buttonInc}\r\n                        title=\"inc\"\r\n                        changeCount={props.incCount}\r\n                        disabled={props.isEditMode || count === props.maxCount}\r\n                />\r\n                <Button className={b.buttonRes}\r\n                        title=\"reset\"\r\n                        changeCount={props.resetCount}\r\n                        disabled={props.isEditMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React, {ChangeEvent} from \"react\";\r\nimport s from './SetInput.module.css'\r\n\r\ntype InputType = {\r\n    className: string\r\n    title: string\r\n    value: number\r\n    onChange: (count: number) => void\r\n    error: boolean\r\n}\r\n\r\nconst SetInput = (props: InputType) => {\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let count = Number(e.currentTarget.value)\r\n        if (count >= 0) {\r\n            props.onChange(count)\r\n        } else {\r\n            props.onChange(count)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {props.title}\r\n            <input className={props.error ? s.error : s.input} type=\"number\" value={props.value} onChange={onChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetInput","import React from \"react\";\r\nimport s from './SetScreen.module.css'\r\nimport SetInput from \"./SetInput/SetInput\";\r\n\r\ntype SetScreenType = {\r\n    minCount: number\r\n    maxCount: number\r\n    changeMinCount: (newMinCount: number) => void\r\n    changeMaxCount: (newMaxCount: number) => void\r\n    error: boolean\r\n}\r\n\r\nconst SetScreen = (props: SetScreenType) => {\r\n    return (\r\n        <div className={s.setScreen}>\r\n            <SetInput className={s.startText}\r\n                      title=\"start value:\"\r\n                      value={props.minCount}\r\n                      onChange={props.changeMinCount}\r\n                      error={props.error}\r\n            />\r\n            <SetInput className={s.maxText}\r\n                      title=\"max value:\"\r\n                      value={props.maxCount}\r\n                      onChange={props.changeMaxCount}\r\n                      error={props.error}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetScreen","import React from \"react\"\r\nimport s from './SetBoard.module.css'\r\nimport b from '../Button/Button.module.css'\r\nimport SetScreen from '../SetScreen/SetScreen'\r\nimport Button from \"../Button/Button\";\r\n\r\ntype SetBoardType = {\r\n    minCount: number\r\n    maxCount: number\r\n    isEditMode: boolean\r\n    changeMinCount: (newMinCount: number) => void\r\n    changeMaxCount: (newMaxCount: number) => void\r\n    setCounts: () => void\r\n    error: boolean\r\n}\r\n\r\nconst SetBoard = (props: SetBoardType) => {\r\n    return (\r\n        <div className={s.setBoard}>\r\n            <SetScreen minCount={props.minCount}\r\n                       maxCount={props.maxCount}\r\n                       changeMinCount={props.changeMinCount}\r\n                       changeMaxCount={props.changeMaxCount}\r\n                       error={props.error}\r\n            />\r\n            <div className={s.setButtonContainer}>\r\n                <Button className={b.buttonSet}\r\n                        title=\"set\"\r\n                        changeCount={props.setCounts}\r\n                        disabled={!props.isEditMode || props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SetBoard","export type ActionType = ReturnType<typeof IncCountAC>\r\n    | ReturnType<typeof ResetCountAC>\r\n    | ReturnType<typeof ChangeMinCountAC>\r\n    | ReturnType<typeof ChangeMaxCountAC>\r\n    | ReturnType<typeof SetCountAC>\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    minCount: 0,\r\n    maxCount: 5,\r\n    isEditMode: false,\r\n    error: false,\r\n    isDataEntering: false\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-COUNT\":\r\n            return {\r\n                ...state,\r\n                count: state.count + 1,\r\n            }\r\n        case \"RESET-COUNT\":\r\n            return {\r\n                ...state,\r\n                count: state.minCount\r\n            }\r\n        case \"CHANGE-MIN-COUNT\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.minCount = action.newMinCount\r\n            stateCopy.isEditMode = true\r\n            stateCopy.isDataEntering = true\r\n            stateCopy.error = action.newMinCount >= stateCopy.maxCount || action.newMinCount < 0 ? true : false\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-MAX-COUNT\": {\r\n            let stateCopy = {...state}\r\n            stateCopy.maxCount = action.newMaxCount\r\n            stateCopy.isEditMode = true\r\n            stateCopy.isDataEntering = true\r\n            stateCopy.error = action.newMaxCount <= stateCopy.minCount || action.newMaxCount < 0 ? true : false\r\n            return stateCopy\r\n        }\r\n        case \"SET-COUNT\": {\r\n            let stateCopy = {...state}\r\n            if (stateCopy.minCount < stateCopy.maxCount) {\r\n                stateCopy.isEditMode = false\r\n                stateCopy.isDataEntering = false\r\n                stateCopy.minCount = state.minCount\r\n                stateCopy.maxCount = state.maxCount\r\n                stateCopy.count = state.minCount\r\n            } else {\r\n                stateCopy.error = true\r\n            }\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const IncCountAC = () => ({type: 'INC-COUNT'} as const)\r\nexport const ResetCountAC = () => ({type: 'RESET-COUNT'} as const)\r\nexport const ChangeMinCountAC = (newMinCount: number) => ({type: 'CHANGE-MIN-COUNT', newMinCount} as const)\r\nexport const ChangeMaxCountAC = (newMaxCount: number) => ({type: 'CHANGE-MAX-COUNT', newMaxCount} as const)\r\nexport const SetCountAC = () => ({type: 'SET-COUNT'} as const)","import React from 'react';\r\nimport s from './App.module.css';\r\nimport Board from './Board/Board';\r\nimport SetBoard from './SetBoard/SetBoard';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from './store';\r\nimport {\r\n    IncCountAC,\r\n    ResetCountAC,\r\n    SetCountAC,\r\n    ChangeMinCountAC, ChangeMaxCountAC\r\n} from './counterReducer';\r\n\r\nfunction App() {\r\n\r\n    const minCount = useSelector<AppStateType, number>(state => state.counter.minCount)\r\n    const maxCount = useSelector<AppStateType, number>(state => state.counter.maxCount)\r\n    const isEditMode = useSelector<AppStateType, boolean>(state => state.counter.isEditMode)\r\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const incCount = () => {\r\n        dispatch(IncCountAC())\r\n    }\r\n    const resetCount = () => {\r\n        dispatch(ResetCountAC())\r\n    }\r\n    const changeMinCount = (newMinCount: number) => {\r\n        dispatch(ChangeMinCountAC(newMinCount))\r\n    }\r\n    const changeMaxCount = (newMaxCount: number) => {\r\n        dispatch(ChangeMaxCountAC(newMaxCount))\r\n    }\r\n    const setCounts = () => {\r\n        dispatch(SetCountAC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <div className={s.container}>\r\n                <SetBoard minCount={minCount}\r\n                          maxCount={maxCount}\r\n                          isEditMode={isEditMode}\r\n                          changeMinCount={changeMinCount}\r\n                          changeMaxCount={changeMaxCount}\r\n                          error={error}\r\n                          setCounts={setCounts}\r\n                />\r\n                <Board minCount={minCount}\r\n                       maxCount={maxCount}\r\n                       incCount={incCount}\r\n                       resetCount={resetCount}\r\n                       error={error}\r\n                       isEditMode={isEditMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {loadState, saveState} from \"./utils/localStorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {AppStateType} from \"../store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}